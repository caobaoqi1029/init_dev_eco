import { songItemType, musicList } from '../model/SongModel';
import { AvPlayerManager } from '../services/AvPlayerManager';
import { LogUtils } from '../utils/LogUtils';
import { TimeUtils } from '../utils/TimeUtils';

@Entry
@Component
  // export Ë°®Á§∫Â∞ÜÂΩìÂâçÈ°µÈù¢ÂØºÂá∫
export struct MusicPage {
  private musicList = musicList;
  @State angel: number = 0; // Âî±ÁâáÂàùÂßãËßíÂ∫¶
  @State isPlaying: boolean = false // ÊòØÂê¶Â§Ñ‰∫éÊí≠ÊîæÁä∂ÊÄÅ false ‰∏∫Êí≠Êîæ true Ë°®Á§∫Êí≠Êîæ‰∏≠
  @State currentIndex: number = -1 // ÂΩìÂâçÊí≠ÊîæÊ≠åÊõ≤ index ÈªòËÆ§‰∏∫ -1 Ë°®Á§∫Ê≤°ÊúâÊí≠Êîæ
  @State currentMusic: songItemType = null // ÂΩìÂâçÊí≠ÊîæÊ≠åÊõ≤
  @State totalTime: number = 0 // Ë°®Á§∫Ê≠åÊõ≤ÊÄªÊó∂Èïø
  @State currentTime: number = 0 // Ë°®Á§∫Ê≠åÊõ≤ÂΩìÂâçÊí≠ÊîæÁöÑÊó∂Èïø

  /**
   * Music È°µÈù¢ÂàõÂª∫Êó∂ÂàùÂßãÂåñ AvPlayer ÂØπË±°
   */
  async aboutToAppear() {
    await AvPlayerManager.init()
    // Ëé∑ÂèñÂΩìÂâçÊ≠åÊõ≤ÁöÑÁõ∏ÂÖ≥‰ø°ÊÅØ
    await this.onTime()
  }

  /**
   * Ëé∑ÂèñÂΩìÂâçÊ≠åÊõ≤Áõ∏ÂÖ≥‰ø°ÊÅØ
   */
  async onTime() {
    // durationUpdate Ë°®Á§∫Ëé∑ÂèñÊ≠åÊõ≤ÊÄªÊó∂Èïø
    AvPlayerManager.AvPlayer.on('durationUpdate', (time) => {
      this.totalTime = time
    })
    // timeUpdate Ë°®Á§∫ÂΩìÂâçÊ≠åÊõ≤Êí≠ÊîæÁöÑÊó∂Èïø
    AvPlayerManager.AvPlayer.on('timeUpdate', (time) => {
      this.currentTime = time
    })
  }

  @Builder itemEnd(index: number) {
    // ‰æßÊªëÂêéÂ∞æÁ´ØÂá∫Áé∞ÁöÑÁªÑ‰ª∂
    Button({ type: ButtonType.Circle }) {
      Image($r('app.media.ic_like'))
        .width(20)
        .height(20)
        .fillColor(Color.Red)
        .colorBlend(Color.Red)
        .colorFilter(Color.Red)
        .borderColor(Color.Red)
    }
    .onClick(() => {
      this.musicList.splice(index, 1);
    })
  }

  /**
   * Èü≥‰πêÊí≠Êîæ Builder
   */
  @Builder MusicPlayBuilder(){
    Column() {
      Text(this.currentMusic === null?'Á¶ªÂà´ÂºÄÂá∫Ëä±':this.currentMusic.name).fontWeight(FontWeight.Bold).fontColor(Color.White).margin({ top: 15 })
      Text(this.currentMusic === null?'Â∞±ÂçóÊñπÁöÑÂáØ':this.currentMusic.author)
        .fontWeight(FontWeight.Normal)
        .fontSize(10)
        .fontColor(Color.White)
        .margin({ top: 5 })
      Image($r('app.media.ic_cd'))
        .height('50%')
        .margin({ top: 15 })
        .rotate({ angle: this.angel }) // Ê∑ªÂä†Âä®ÁîªÈ°∫Â∫èÂøÖÈ°ª ËÆæÁΩÆËßíÂ∫¶ --> ËÆæÁΩÆ‰∫ã‰ª∂ --> ËÆæÁΩÆÂä®Áîª
        .onAppear(() => {
          this.angel = 360
        }) // onAppear ÂΩìÂõæÁâáÂä†ËΩΩÂÆåÊàêÂêéËá™Âä®Ëß¶Âèë
        .animation({
          duration: 5000, //Ë°®Á§∫Âä®ÁîªÊó∂Èïø
          curve: Curve.Linear, // Ë°®Á§∫Âî±ÁâáÂåÄÈÄüÊóãËΩ¨
          iterations: -1 // -1Ôºö‰∏ÄÁõ¥ÊóãËΩ¨
        })
      Row() {
        Text(TimeUtils.formatTime(this.currentTime)).fontColor(Color.White)
        Slider({
          min: 0,
          step: 10,
          max: this.totalTime,
          value: this.currentTime,
        })
          .showSteps(true)
          .onChange((time) => {
            AvPlayerManager.AvPlayer.seek(time)
          })
          .layoutWeight(1)
          .trackThickness(3) // ÊªëÂùóÂéöÂ∫¶
          .blockColor('#191970')
          .trackColor('#ADD8E6')
          .selectedColor('#4169E1')
        Text(TimeUtils.formatTime(this.totalTime)).fontColor(Color.White)
      }.width('100%')
    }
    .width('100%').margin({ top: 10 }).layoutWeight(1)
    .radialGradient({
      center: ['50%', '50%'],
      radius: '60%',
      colors: [
        ['#835e13', 0.5],
        [Color.Transparent, 1]
      ],
    })
  }

  /**
   * Èü≥‰πêÂàóË°® Builder
   */
  @Builder musicListBuilder(){
    Column() {
      // ÂÖàÂ§ñÂÜçÈáå ÂÖà‰∏äÂêé‰∏ã ÂÖàÂ∑¶ÂêéÂêé
      Text('Êí≠ÊîæÂàóË°® (' + this.musicList.length + ')').padding(15).fontColor('#ec5c87').fontWeight(600).width('100%')
      List({ space: 10 }) {
        ForEach(this.musicList, (item: songItemType, index: number) => {
          ListItem() {
            Row() {
              Text('' + (index + 1))
                .fontSize(20)
                .fontColor(Color.White)
                .margin({ left: 5 })
                .textAlign(TextAlign.Center)
                .fontWeight(600)
              Row() {
                Image(item.img)
                  .width(40)
                  .height(40)
                  .margin(10)
                  .borderRadius(8)
                Column({ space: 5 }) {
                  Text(item.name).fontSize(20).fontColor(Color.White).width('100%').fontWeight(600)
                  Text(item.author).fontSize(14).fontColor(Color.White).width('100%').fontWeight(500)
                }
              }.layoutWeight(1)
              if (this.isPlaying === false) {
                Image($r('app.media.ic_play')).width('100px').height('100px').margin({ right: 15 })
                  .onClick(() => {
                    // Êí≠ÊîæÊ≠åÊõ≤
                    AvPlayerManager.playMusic(item)
                    // Â∞ÜÂΩìÂâçÊí≠Êîæ index ËµãÂÄº
                    this.currentIndex = index
                    this.currentMusic = musicList[this.currentIndex]
                    LogUtils.log('currentMusic:'+ this.currentMusic.name)
                    this.isPlaying = true
                  })
              }
              if (this.isPlaying === true) {
                if (index === this.currentIndex) {
                  // Êí≠ÊîæÂä®Áîª
                  Image($r('app.media.ic_playing')).width(50)
                  Image($r('app.media.ic_paused'))
                    .width('100px')
                    .height('100px')
                    .margin({ right: 15 })
                    .fillColor(Color.White)
                    .onClick(() => {
                      // ÊöÇÂÅúÂΩìÂâçÊí≠ÊîæÁöÑÊ≠åÊõ≤
                      AvPlayerManager.pauseMusic()
                      this.isPlaying = false
                    })
                } else {
                  Image($r('app.media.ic_play')).width('100px').height('100px').margin({ right: 15 })
                    .onClick(() => {
                      // Êí≠ÊîæÊ≠åÊõ≤
                      AvPlayerManager.playMusic(item)
                      // Â∞ÜÂΩìÂâçÊí≠Êîæ index ËµãÂÄº
                      this.currentIndex = index
                      this.currentMusic = musicList[this.currentIndex]
                      this.isPlaying = true
                    })
                }

              }
            }
            .width('100%') // Â∞Ü Text('' + item.id).fontSize(20).fontColor(Color.White) ÁΩÆ‰∫éÂÆπÂô®Â∑¶ËæπÔºå‰∏ÄËà¨ÊòØÂú®Áà∂ÂÆπÂô® Ê∑ªÂä† .width('100%')
          }.swipeAction({ end: this.itemEnd(index) }) // ËÆæÁΩÆ‰æßÊªëÂ±ûÊÄß
        }, item => item.id)
        ListItem() {
          Text('Â∑≤ÁªèÂà∞Â∫ï‰∫Ü').fontColor(Color.Gray).width('100%').textAlign(TextAlign.Center)
        }.padding({ bottom: 20 })
      }.width('100%').height('100%')
      .divider({
        strokeWidth: 1,
        startMargin: 5,
        endMargin: 5,
        color: '#ffe9f0f0'
      }).scrollBar(BarState.Auto)
    }
    .borderRadius({ topLeft: 15, topRight: 15 })
    .width('100%')
    .backgroundColor('#ff2b2a2a')
    .layoutWeight(2) //Ë°®Á§∫‰Ω†Ë¶ÅÂç†Êï¥‰∏™Â±èÂπïÁöÑÂ§öÂ∞ë
  }

  build() {
    Column() {
      this.MusicPlayBuilder()
      this.musicListBuilder()
      Row(){
        Button('<- üêî').layoutWeight(1).onClick(()=>{
          if (this.currentIndex -1 >= 0 && this.currentIndex < musicList.length) {
            AvPlayerManager.pauseMusic()
            this.currentIndex -= 1
            this.currentMusic = this.musicList[this.currentIndex]
            AvPlayerManager.playMusic(this.currentMusic)
          }
        })
        Button('üèÄ ->').layoutWeight(1).onClick(()=>{
          if (this.currentIndex + 1 <= musicList.length&& this.currentIndex > 0) {
            AvPlayerManager.pauseMusic()
            this.currentIndex += 1
            this.currentMusic = this.musicList[this.currentIndex]
            AvPlayerManager.playMusic(this.currentMusic)
          }
        })
      }.width('100%').height('10%')
    }.width('100%').height('100%').backgroundColor(Color.Black)
  }
}


